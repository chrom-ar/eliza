name: Deploy to ECR

on: [ push ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: sandbox
        IMAGE_TAG: latest
      run: |
        # Get the short SHA
        SHORT_SHA=$(git rev-parse --short HEAD)
        
        # Build with latest and commit SHA tags
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
          -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA .
        
        # Push both tags
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
        
        # Get git tags pointing to current commit (if any)
        GIT_TAGS=$(git tag --points-at HEAD)
        
        # If there are git tags, build and push with those tags
        if [ ! -z "$GIT_TAGS" ]; then
          for TAG in $GIT_TAGS; do
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$TAG
          done
        fi

    - name: Force new deployment
      run: |
        aws ecs update-service --cluster sandbox --service sandbox --force-new-deployment
